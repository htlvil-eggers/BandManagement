package pkgModel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;

import oracle.jdbc.OracleDriver;
import pkgService.AppearanceRequests;


public class DatabaseManager {
	//static final String DB_URL = "jdbc:oracle:thin:@192.168.128.151:1521:ora11g"; //intern
    static final String DB_URL = "jdbc:oracle:thin:@212.152.179.117:1521:ora11g"; //extern
	private String USER = "d5bhifs25";
	private String PASS = "edelBlech";
    private Connection conn = null;
   // private Statement stmt = null;
   
	public DatabaseManager(String username, String password){
		   this.USER  = username;
		   this.PASS = password;
	   }
	   
	public DatabaseManager(){
		super();
		try {
			this.createConnection();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public Connection createConnection() throws Exception {
		DriverManager.registerDriver(new OracleDriver());
		conn = DriverManager.getConnection(DB_URL, USER, PASS);
		return conn;
	}
	   
	   
	public ResultSet getData(String statement){
		ResultSet retValue = null;
		try{
		conn = createConnection();
		PreparedStatement stmt = null;

		stmt = conn.prepareStatement(statement,	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
		retValue  = stmt.executeQuery();
		
		}catch(Exception e){
			System.out.println("Error in get Data");
			retValue =  null;
		}
		
		return retValue;
	}

	public void closeCon(){
	   try {
		   conn.close();
	  } catch (SQLException e) {
		  e.printStackTrace();
	  }
	}

	public Vector<Location> getLocations(){
		ResultSet rs = this.getData("select id, name from locations");
		Vector<Location> locations = new Vector<Location>();
		
		try {
			while (rs.next()) {
				locations.add(new Location(rs.getString(2),rs.getInt(1)));
			}
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return locations;
	}
	
	public Vector<Instrument> getInstruments(){
		ResultSet rs = this.getData("select id, name from instruments");
		Vector<Instrument> instruments = new Vector<Instrument>();
		
		try {
			while (rs.next()) {
				instruments.add(new Instrument(rs.getString(2),rs.getInt(1)));
			}
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return instruments;
	}

	public Musician getMusician(String username, String password) {
		PreparedStatement stmt = null;
		Musician retValue = null;
				
		try {
			stmt = conn.prepareStatement("select m.id, m.username, m.password, m.first_name, " +
					 "m.last_name, m.birthdate, l.id, l.name from musicians m " +
					  "join locations l on m.habitation_id = l.id where m.username = ? and m.password = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, username);
			stmt.setString(2, password);
			ResultSet rs = stmt.executeQuery();
			
			while (rs.next() && retValue == null) {
				//get instrument skills
				Vector<Instrument> instruments = this.getInstrumentsOfMusician(rs.getInt(1));				
				//get available times
				Vector<AvailableTime> availableTimes = this.getAvailableTimesOfMusician(rs.getInt(1));
				
				retValue =  new Musician(rs.getInt(1),rs.getString(2),rs.getString(3),
						rs.getString(4), rs.getString(5), instruments, 
						new Location(rs.getString(8), rs.getInt(7)), rs.getDate(6), availableTimes);
			}
			
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return retValue;
	}

	private Vector<AvailableTime> getAvailableTimesOfMusician(int musId) throws SQLException {
		Vector<AvailableTime> avTimes = new Vector<AvailableTime>();
		PreparedStatement stmt = conn.prepareStatement("select av.id, av.start_time, av.end_time from available_times av " +
				  "where av.musician_id = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
		stmt.setInt(1, musId);
		ResultSet rs = stmt.executeQuery();
		
		while(rs.next()) {
			avTimes.add(new AvailableTime(rs.getInt(1), rs.getDate(2), rs.getDate(3)));
		}
		
		return avTimes;
	}

	private Vector<Instrument> getInstrumentsOfMusician(int musId) throws SQLException {
		Vector<Instrument> instruments = new Vector<Instrument>();
		PreparedStatement stmt = conn.prepareStatement("select i.id, i.name from instruments i " +
				  "join instrument_skills ins on i.id = ins.instrument_id where ins.musician_id = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
		stmt.setInt(1, musId);
		ResultSet rs = stmt.executeQuery();
		
		while(rs.next()) {
			instruments.add(new Instrument(rs.getString(2), rs.getInt(1)));
		}
		
		return instruments;
	}

	public void updateMusician(Musician m) {
		try {
			PreparedStatement stmt = conn.prepareStatement("update musicians m set first_name = ?," + 
		         "last_name = ?, birthdate = ?, habitation_id = ?, password = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, m.getFirstName());
			stmt.setString(2, m.getLastName());
			stmt.setDate(3, new java.sql.Date(m.getBirthdate().getTime()));
			stmt.setInt(4, m.getHabitation().getId());
			stmt.setString(5, m.getPassword());
			stmt.executeUpdate();
			
			//set instrument_skills
			stmt = conn.prepareStatement("delete from instrument_skills where musician_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, m.getId());
			stmt.executeUpdate();
			
			for (Instrument i : m.getSkills()) {
				stmt = conn.prepareStatement("insert into instrument_skills values(?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
				stmt.setInt(1, m.getId());
				stmt.setInt(2, i.getId());
				stmt.executeUpdate();
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	public Vector<RehearsalRequest> getRehearsalRequestsOfBand(String bandname) {
		Vector<RehearsalRequest> rehearsalRequests = new Vector<RehearsalRequest>();
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select r.id, r.start_time, r.end_time, r.duration from " +
		      "rehearsal_requests r join bands b on r.band_id = b.id where b.name = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, bandname);
			
			ResultSet rs = stmt.executeQuery();		
			while (rs.next()) {
				rehearsalRequests.add(new RehearsalRequest(rs.getInt(1), rs.getDate(2), rs.getDate(3), rs.getDouble(4)));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return rehearsalRequests;
	}

	public void addAvailableTime(String bandname, String username, Date from, Date to) {		
		try {
			int bandId = this.getBandIdFromName(bandname);
			int musId = this.getMusicianIdFromName(username);
			
			PreparedStatement stmt = conn.prepareStatement("insert into available_times values(0, ?, ?, ?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, bandId);
			stmt.setInt(2, musId);
			stmt.setDate(3, new java.sql.Date(from.getTime()));
			stmt.setDate(4, new java.sql.Date(to.getTime()));
			stmt.executeUpdate();	
		} catch (SQLException e) {
			e.printStackTrace();
		}		
	}

	private int getMusicianIdFromName(String username) throws SQLException {
		PreparedStatement stmt = conn.prepareStatement("select id from musicians where username = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
		stmt.setString(1, username);
		ResultSet rs = stmt.executeQuery();
		int musId = -1;
		
		while (rs.next()) {
			musId = rs.getInt(1);
		}
		
		return musId;
	}

	public int getBandIdFromName(String bandname)  {
		int bandId = -1;
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select id from bands where name = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, bandname);
			ResultSet rs = stmt.executeQuery();		
			
			while (rs.next()) {
				bandId = rs.getInt(1);
			}
		}  catch (SQLException e) {
			e.printStackTrace();
		}	
		return bandId;
	}

	public void answerAppearanceRequest(Appointment appReq, String bandname, String username, String password,
			boolean accepted) {		
		try {
			if (checkLogin(bandname, username, password)) {
				PreparedStatement stmt = conn.prepareStatement("insert into appointment_attendances values (?, ?, ?, ?)",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
				stmt.setInt(1, appReq.getId());
				stmt.setInt(2, this.getBandIdFromName(bandname));
				stmt.setInt(3, this.getMusicianIdFromName(username));
				stmt.setBoolean(4, accepted);
				stmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}		
	}

	public boolean checkLogin(String bandname, String username, String password) {
		boolean correct = false;
		try {
			PreparedStatement stmt = conn.prepareStatement("select m.id from musicians m join bandmembers bm on "
					   + "m.id = bm.musician_id where m.username = ? and m.password = ? and bm.band_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, username);
			stmt.setString(2, password);
			stmt.setInt(3, this.getBandIdFromName(bandname));
			ResultSet rs = stmt.executeQuery();
			
			while (rs.next()){
				correct = true;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		return correct;
	}

	public Vector<Appointment> getUnansweredAppearanceRequests(String bandname, String username, String password) {
		Vector<Appointment> appRequests = new Vector<Appointment>();
		Appointment appToRemove = null;
		
		try {
			if (checkLogin(bandname, username, password)) {
				int bandId = this.getBandIdFromName(bandname);
				PreparedStatement stmt = conn.prepareStatement("select apt.id, apt.name, apt.description, apt.grounded, apt.start_time, apt.end_time, "
						+ "l.id, l.name from locations l join appointments apt on l.id = apt.location_id join appearances apc on apt.id = apc.appointment_id " +
						"where apc.band_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
				stmt.setInt(1, bandId);
				ResultSet rs = stmt.executeQuery();
				
				while (rs.next()){
					appRequests.add(new Appointment(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getInt(4),
							rs.getDate(5), rs.getDate(6), new Location(rs.getString(8), rs.getInt(7)), EnumAppointmentType.Appearance));
				}
			
				//select only unanswered ones
				stmt = conn.prepareStatement("select aa.appointment_id from appointment_attendances aa join appearances app on aa.appointment_id = " +
						"app.appointment_id where aa.band_id = ? and aa.musician_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
				stmt.setInt(1, bandId);
				stmt.setInt(2, this.getMusicianIdFromName(username));
				rs = stmt.executeQuery();
				
				while (rs.next()) {
					for (Appointment app : appRequests) {
						if (app.getId() == rs.getInt(1)) {
							appToRemove = app;
						}
					}
					
					if (appToRemove != null) {
						appRequests.remove(appToRemove);
						appToRemove = null;
					}
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		return appRequests;
	}

	public void addMusician(Musician m) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into musicians values(0, ?, ?, ?, ?, ?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, m.getUsername());
			stmt.setString(2, m.getPassword());
			stmt.setString(3, m.getFirstName());
			stmt.setString(4, m.getLastName());
			if (m.getBirthdate() == null)
			{
				stmt.setDate(5, null);
			} else {
				stmt.setDate(5, new java.sql.Date(m.getBirthdate().getTime()));
			}
			if (m.getHabitation() == null) {
				stmt.setNull(6, java.sql.Types.INTEGER);
			} else {
				stmt.setInt(6, m.getHabitation().getId());
			}
			stmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}		
	}

	public void addBand(Band band, String username) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into bands values(0, ?, ?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, band.getName());
			stmt.setInt(2, this.getMusicianIdFromName(username));
			stmt.setInt(3, band.getCostsPerHour());
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}

	public Band getBand(String bandname, String username) {
		Band retB = null;
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select b.id, b.costs_per_hour from bands b join musicians m on b.leader_id = m.id where b.name = ? and m.username = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, bandname);
			stmt.setString(2, username);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				retB = new Band();
				retB.setId(rs.getInt(1));
				retB.setName(bandname);
				retB.setCostsPerHour(rs.getInt(2));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		
		return retB;
	}

	public Musician[] getMusiciansOfBand(String bandname) {
		Vector<Musician> musicians = new Vector<Musician>();
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select m.id, m.username, m.password, m.first_name, " + 
		       "m.last_name from bands b join bandmembers bm on b.id = bm.band_id " +
		       "join musicians m on bm.musician_id = m.id where b.name = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, bandname);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				musicians.add(new Musician(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
						rs.getString(5), null, null, null, null));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		
		return musicians.toArray(new Musician[musicians.size()]);
	}

	public AppearanceRequest[] getAppearanceRequestsOfBand(String bandname) {
		Vector<AppearanceRequest> appRequests = new Vector<AppearanceRequest>();
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select ap.id, ap.start_time, ap.end_time, l.id, l.name, ap.accepted, ap.name, ap.description from bands b " + 
		        "join appearance_requests ap on b.id = ap.band_id join locations l on ap.location_id = l.id where b.name = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, bandname);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				appRequests.add(new AppearanceRequest(rs.getInt(1), rs.getString(7), rs.getString(8), rs.getDate(2), rs.getDate(3),
						new Location(rs.getString(5), rs.getInt(4)), rs.getInt(6)));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		
		return appRequests.toArray(new AppearanceRequest[appRequests.size()]);
	}

	public Appointment[] getAppointmentsOfBand(String bandname) {
    	Vector<Appointment> appointments = new Vector<Appointment>();
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select m.id as mId, m.start_time as mSTime, m.end_time as mETime, l.id as lId, l.name as lName," +
                "m.grounded as mGrounded, m.name as mName, m.description as mDesc from bands b join appointments m on b.id = m.band_id join locations l on m.location_id = l.id where b.name = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, bandname);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				EnumAppointmentType type = this.getTypeOfAppointment(rs.getInt(1));
				
				appointments.add(new Appointment(rs.getInt(1), rs.getString(7), rs.getString(8), rs.getInt(6), rs.getDate(2),
						rs.getDate(3), new Location(rs.getString(5), rs.getInt(4)), type));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		
		return appointments.toArray(new Appointment[appointments.size()]);
	}

	private EnumAppointmentType getTypeOfAppointment(int appId) {
		EnumAppointmentType type = EnumAppointmentType.Appearance;

		try {
			PreparedStatement stmt = conn.prepareStatement("select * from rehearsals where appointment_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, appId);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				type = EnumAppointmentType.Rehearsal;
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		
		return type;
	}

	public void addMember(Band band, String username) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into bandmembers values(?, ?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getId());
			stmt.setInt(2, this.getMusicianIdFromName(username));
			stmt.setDate(3, new java.sql.Date(new Date().getTime()));
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}

	public void deleteMember(Band band, String username) {
		try {
			PreparedStatement stmt = conn.prepareStatement("delete from available_times where band_id = ? and musician_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getId());
			stmt.setInt(2, this.getMusicianIdFromName(username));
			
			stmt.executeUpdate();
			
			stmt = conn.prepareStatement("delete from bandmembers where band_id = ? and musician_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getId());
			stmt.setInt(2, this.getMusicianIdFromName(username));
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public void deleteAppearanceRequest(int id) {
		try {
			PreparedStatement stmt = conn.prepareStatement("delete from appearance_requests where id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, id);
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public void addAppointment(Band band, Appointment appointment) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into appointments values (0, ?, ?, ?, ?, ?, ?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getId());
			stmt.setInt(2, appointment.getLocation().getId());
			stmt.setInt(3, appointment.getGrounded());
			stmt.setDate(4, new java.sql.Date(appointment.getStartTime().getTime()));
			stmt.setDate(5, new java.sql.Date(appointment.getEndTime().getTime()));
			stmt.setString(6, appointment.getName());
			stmt.setString(7, appointment.getDescription());
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public int getIdFromAppointment(Band b, Appointment appointment) {
		int id = -1;
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select id  from appointments where band_id = ? and start_time = ? and end_time = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, b.getId());
			stmt.setDate(2, new java.sql.Date(appointment.getStartTime().getTime()));
			stmt.setDate(3, new java.sql.Date(appointment.getEndTime().getTime()));
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				id = rs.getInt(1);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return id;
	}

	public void addAppearance(Band band, Appointment appointment) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into appearances values (?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, appointment.getId());
			stmt.setInt(2, band.getId());
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public void groundAppointment(int id) {
		try {
			PreparedStatement stmt = conn.prepareStatement("update appointments set grounded = 1 where id = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, id);

			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}
	
	public boolean haveAllMembersAcceptedAppointment(String bandname, int appId) {
		boolean ret = true;
		HashMap<String, Integer> answers = this.getAllAnswersForAppointment(bandname, appId); 
		
		if (answers.size() < this.getMusiciansOfBand(bandname).length) {
			ret = false;
		}
		else {
			for (int accepted : answers.values()) {
				if (accepted != 1) {
					ret = false;
				}
			}
		}
		return ret;
	}

	public HashMap<String, Integer> getAllAnswersForAppointment(String bandname, int appId) {
		HashMap<String, Integer> answers = new HashMap<String, Integer>();
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select m.username as mUsername, a.accepted as aAccepted from bands b join appointment_attendances a on b.id = a.band_id join musicians m on a.musician_id = m.id " + 
                                                  "where b.name = ? and a.appointment_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, bandname);
			stmt.setInt(2, appId);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				answers.put(rs.getString(1), rs.getInt(2));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return answers;
	}

	public void removeAppointment(Appointment app) {
		try {
			PreparedStatement stmt;
			
			if (app.getType() == EnumAppointmentType.Rehearsal) {
				stmt = conn.prepareStatement("delete from rehearsals where appointment_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
				stmt.setInt(1, app.getId());
				
				stmt.executeUpdate();
			}
			
			stmt = conn.prepareStatement("delete from appointments where id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, app.getId());
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public void addRehearsalRequest(Band band, RehearsalRequest rehearsalRequest) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into rehearsal_requests values (0, ?, ?, ?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getId());
			stmt.setDate(2, new java.sql.Date(rehearsalRequest.getStartTime().getTime()));
			stmt.setDate(3, new java.sql.Date(rehearsalRequest.getEndTime().getTime()));
			stmt.setDouble(4, rehearsalRequest.getDuration());
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}			
	}

	public int getIdFromRehearsalRequest(Band band, RehearsalRequest rehearsalRequest) {
		int id = -1;
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select id  from rehearsal_requests where band_id = ? and start_time = ? and end_time = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getId());
			stmt.setDate(2, new java.sql.Date(rehearsalRequest.getStartTime().getTime()));
			stmt.setDate(3, new java.sql.Date(rehearsalRequest.getEndTime().getTime()));
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				id = rs.getInt(1);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return id;
	}

	public void removeRehearsalRequest(int id) {
		try {
			PreparedStatement stmt = conn.prepareStatement("delete from rehearsal_requests where id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, id);
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}			
	}

	public Band allAvailableTimes(Band band) {
		Band ret = band;
		band.getLeader().setAvailableTimes(new Vector<AvailableTime>());
		for (Musician m : band.getMusicians()) {
			m.setAvailableTimes(new Vector<AvailableTime>());
		}
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select id, musician_id, start_time, end_time from available_times where band_id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getId());
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
					for (Musician m : band.getMusicians()) {
						if (m.getId() == rs.getInt(2)) {
							m.addAvailableTime(new AvailableTime(rs.getInt(1), 
								rs.getDate(3), rs.getDate(4)));
						}
					}
				if(band.getLeader().getId() == rs.getInt(2)) {
					band.getLeader().addAvailableTime(new AvailableTime(rs.getInt(1), 
							rs.getDate(3), rs.getDate(4)));
				}				
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return ret;
	}

	public void updateBand(Band band) {
		try {
			PreparedStatement stmt = conn.prepareStatement("update bands set costs_per_hour = ? where id = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getCostsPerHour());
			stmt.setInt(2, band.getId());

			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}

	public void addLocation(AddSpatialWrapper wrapper) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into locations values(0, ?, SDO_GEOMETRY(2003,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1,1), " + 
                                             "SDO_ORDINATE_ARRAY(?,?)))", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, wrapper.getLocation().getName());
			stmt.setDouble(2, wrapper.getX());
			stmt.setDouble(3, wrapper.getY());

			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}

	public int getIdFromLocation(Location loc) {
		int id = -1;
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select id from locations where name = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, loc.getName());
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				id = rs.getInt(1);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return id;
	}

	public void updateLocation(AddSpatialWrapper wrapper) {
		try {
			PreparedStatement stmt;
			
			stmt = conn.prepareStatement("update locations set name = ? where id = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			
			if (wrapper.getX() != -1 && wrapper.getY() != -1)
			{
				stmt = conn.prepareStatement("update locations set name = ?, shape = SDO_GEOMETRY(2003,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1,1), " +
                                             "SDO_ORDINATE_ARRAY(?,?)) where id = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
				stmt.setDouble(2, wrapper.getX());
				stmt.setDouble(3, wrapper.getY());
				stmt.setInt(4, wrapper.getLocation().getId());
			}
			else 
			{
				stmt.setInt(2, wrapper.getLocation().getId());
			}
			
			stmt.setString(1, wrapper.getLocation().getName());						

			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public void updateStreet(AddSpatialWrapper wrapper) {
		try {
			PreparedStatement stmt;			
			stmt = conn.prepareStatement("update locations set name = ? where id = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			
			if (wrapper.getX() != -1 && wrapper.getY() != -1 && wrapper.getX2() != -1 && wrapper.getY2() != -1) {
				stmt = conn.prepareStatement("update streets set name = ?, shape = SDO_GEOMETRY(2002,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1, 1,1), " +
	                                             "SDO_ORDINATE_ARRAY(?,?, ?,?)) where id = ?",	ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);				
				stmt.setDouble(2, wrapper.getX());
				stmt.setDouble(3, wrapper.getY());
				stmt.setDouble(4, wrapper.getX2());
				stmt.setDouble(5, wrapper.getY2());
				stmt.setInt(6, wrapper.getStreet().getId());
			}
			else {
				stmt.setInt(2, wrapper.getStreet().getId());
			}
			
			stmt.setString(1, wrapper.getStreet().getName());		

			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public void addStreet(AddSpatialWrapper wrapper) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into streets values(0, ?, SDO_GEOMETRY(2002,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1, 1,1), " + 
                                             "SDO_ORDINATE_ARRAY(?,?, ?,?)))", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, wrapper.getStreet().getName());
			stmt.setDouble(2, wrapper.getX());
			stmt.setDouble(3, wrapper.getY());
			stmt.setDouble(4, wrapper.getX2());
			stmt.setDouble(5, wrapper.getY2());
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}

	public int getIdFromStreet(Street str) {
		int id = -1;
		
		try {
			PreparedStatement stmt = conn.prepareStatement("select id from streets where name = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setString(1, str.getName());
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				id = rs.getInt(1);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return id;
	}

	public Vector<AddSpatialWrapper> getLocationsSpatial() {
		ResultSet rs = this.getData("select l.id as lid, l.name as lname, t.x as tX, t.y as tY FROM locations l, TABLE(SDO_UTIL.GETVERTICES(l.shape)) t");
		Vector<AddSpatialWrapper> wrappers = new Vector<AddSpatialWrapper>();
		
		try {
			while (rs.next()) {
				wrappers.add(new AddSpatialWrapper(new Location(rs.getString(2),rs.getInt(1)), rs.getDouble(3), rs.getDouble(4)));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return wrappers;
	}
	
	public Vector<AddSpatialWrapper> getStreetsSpatial() {
		ResultSet rs = this.getData("select s.id as sid, s.name as sname, t.x as tX, t.y as tY FROM streets s, TABLE(SDO_UTIL.GETVERTICES(s.shape)) t");
		Vector<AddSpatialWrapper> wrappers = new Vector<AddSpatialWrapper>();
		
		try {
			while (rs.next()) {
				wrappers.add(new AddSpatialWrapper(new Street(rs.getInt(1),rs.getString(2)), rs.getDouble(3), rs.getDouble(4)));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return wrappers;
	}

	public void deleteLocation(int id) {
		try {
			PreparedStatement stmt = conn.prepareStatement("delete from locations where id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, id);
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}

	public void deleteStreet(int id) {
		try {
			PreparedStatement stmt = conn.prepareStatement("delete from streets where id = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, id);
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public Band[] getBands() {
		ResultSet rs = this.getData("select id, name from bands");
		Vector<Band> bands = new Vector<Band>();
		
		try {
			while (rs.next()) {
				Band b = new Band();
				b.setId(rs.getInt(1));
				b.setName(rs.getString(2));
				
				bands.add(b);
			}
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return bands.toArray(new Band[bands.size()]);
		
	}

	public void addAppearanceRequest(Band band, AppearanceRequest appearanceRequest) {
		try {
			PreparedStatement stmt = conn.prepareStatement("insert into appearance_requests values (0, ?, ?, ?, ?, ?, ?, ?)", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			stmt.setInt(1, band.getId());
			stmt.setDate(4, new java.sql.Date(appearanceRequest.getStartTime().getTime()));
			stmt.setDate(5, new java.sql.Date(appearanceRequest.getEndTime().getTime()));
			stmt.setInt(2, appearanceRequest.getLocation().getId());
			stmt.setInt(3, appearanceRequest.getAccepted());
			stmt.setString(6, appearanceRequest.getName());
			stmt.setString(7, appearanceRequest.getDescription());
			
			stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}
}